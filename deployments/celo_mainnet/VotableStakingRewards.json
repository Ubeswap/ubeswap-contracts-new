{
  "address": "0x388D611A57Ac15dCC1B937f287E5E908Ba5ff5c9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_rewardsDistribution",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_rewardsToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_stakingToken",
          "type": "address"
        },
        {
          "internalType": "contract IRomulusDelegate",
          "name": "_romulusDelegate",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "previousDelegateIdx",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "nextDelegateIdx",
          "type": "uint8"
        }
      ],
      "name": "DelegateIdxChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldOwner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnerChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnerNominated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Recovered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "RewardAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "RewardPaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousRewardsDistribution",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "nextRewardsDistribution",
          "type": "address"
        }
      ],
      "name": "RewardsDistributionChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newDuration",
          "type": "uint256"
        }
      ],
      "name": "RewardsDurationUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Staked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdrawn",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "nextIdx",
          "type": "uint8"
        }
      ],
      "name": "changeDelegateIdx",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "delegates",
      "outputs": [
        {
          "internalType": "contract Voter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "earned",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "exit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRewardForDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastTimeRewardApplicable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastUpdateTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "nominateNewOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nominatedOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "notifyRewardAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "periodFinish",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "recoverERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardPerToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardPerTokenStored",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "rewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardsDistribution",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardsDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardsToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewardsDistribution",
          "type": "address"
        }
      ],
      "name": "setRewardsDistribution",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_rewardsDuration",
          "type": "uint256"
        }
      ],
      "name": "setRewardsDuration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakingToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "supportOf",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userDelegateIdx",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userRewardPerTokenPaid",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x26b93221857f46562d1946db6cec403de72cee342a1d25e309f6722d46a09acb",
  "receipt": {
    "to": null,
    "from": "0x2c2bc76B97BCe84A5a9c6e2835AB13306B964cf1",
    "contractAddress": "0x388D611A57Ac15dCC1B937f287E5E908Ba5ff5c9",
    "transactionIndex": 2,
    "gasUsed": "3293659",
    "logsBloom": "0x
    "blockHash": "0xbfaaf3629f818d76a289c8f81941f07e2ffd8cbe1fc3c8eb560c3bfadf35be74",
    "transactionHash": "0x26b93221857f46562d1946db6cec403de72cee342a1d25e309f6722d46a09acb",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 24571238,
        "transactionHash": "0x26b93221857f46562d1946db6cec403de72cee342a1d25e309f6722d46a09acb",
        "address": "0x388D611A57Ac15dCC1B937f287E5E908Ba5ff5c9",
        "topics": [
          "0xb532073b38c83145e3e5135377a08bf9aab55bc0fd7c1179cd4fb995d2a5159c"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000002c2bc76b97bce84a5a9c6e2835ab13306b964cf1",
        "logIndex": 3,
        "blockHash": "0xbfaaf3629f818d76a289c8f81941f07e2ffd8cbe1fc3c8eb560c3bfadf35be74"
      },
      {
        "transactionIndex": 2,
        "blockNumber": 24571238,
        "transactionHash": "0x26b93221857f46562d1946db6cec403de72cee342a1d25e309f6722d46a09acb",
        "address": "0x015aE7f80b5D8cC927c14BB28D080e8214725E48",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000388d611a57ac15dcc1b937f287e5e908ba5ff5c9"
        ],
        "data": "0x",
        "logIndex": 4,
        "blockHash": "0xbfaaf3629f818d76a289c8f81941f07e2ffd8cbe1fc3c8eb560c3bfadf35be74"
      },
      {
        "transactionIndex": 2,
        "blockNumber": 24571238,
        "transactionHash": "0x26b93221857f46562d1946db6cec403de72cee342a1d25e309f6722d46a09acb",
        "address": "0x71e26d0E519D14591b9dE9a0fE9513A398101490",
        "topics": [
          "0x3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f",
          "0x000000000000000000000000015ae7f80b5d8cc927c14bb28d080e8214725e48",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000015ae7f80b5d8cc927c14bb28d080e8214725e48"
        ],
        "data": "0x",
        "logIndex": 5,
        "blockHash": "0xbfaaf3629f818d76a289c8f81941f07e2ffd8cbe1fc3c8eb560c3bfadf35be74"
      },
      {
        "transactionIndex": 2,
        "blockNumber": 24571238,
        "transactionHash": "0x26b93221857f46562d1946db6cec403de72cee342a1d25e309f6722d46a09acb",
        "address": "0xD91fc9868B3D1393a10d89ac4D258A0322E3FC90",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000388d611a57ac15dcc1b937f287e5e908ba5ff5c9"
        ],
        "data": "0x",
        "logIndex": 6,
        "blockHash": "0xbfaaf3629f818d76a289c8f81941f07e2ffd8cbe1fc3c8eb560c3bfadf35be74"
      },
      {
        "transactionIndex": 2,
        "blockNumber": 24571238,
        "transactionHash": "0x26b93221857f46562d1946db6cec403de72cee342a1d25e309f6722d46a09acb",
        "address": "0x71e26d0E519D14591b9dE9a0fE9513A398101490",
        "topics": [
          "0x3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f",
          "0x000000000000000000000000d91fc9868b3d1393a10d89ac4d258a0322e3fc90",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000d91fc9868b3d1393a10d89ac4d258a0322e3fc90"
        ],
        "data": "0x",
        "logIndex": 7,
        "blockHash": "0xbfaaf3629f818d76a289c8f81941f07e2ffd8cbe1fc3c8eb560c3bfadf35be74"
      },
      {
        "transactionIndex": 2,
        "blockNumber": 24571238,
        "transactionHash": "0x26b93221857f46562d1946db6cec403de72cee342a1d25e309f6722d46a09acb",
        "address": "0xEae53353abCd4D5Cb5472DFb96CdC1eB3AE50DA0",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000388d611a57ac15dcc1b937f287e5e908ba5ff5c9"
        ],
        "data": "0x",
        "logIndex": 8,
        "blockHash": "0xbfaaf3629f818d76a289c8f81941f07e2ffd8cbe1fc3c8eb560c3bfadf35be74"
      },
      {
        "transactionIndex": 2,
        "blockNumber": 24571238,
        "transactionHash": "0x26b93221857f46562d1946db6cec403de72cee342a1d25e309f6722d46a09acb",
        "address": "0x71e26d0E519D14591b9dE9a0fE9513A398101490",
        "topics": [
          "0x3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f",
          "0x000000000000000000000000eae53353abcd4d5cb5472dfb96cdc1eb3ae50da0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000eae53353abcd4d5cb5472dfb96cdc1eb3ae50da0"
        ],
        "data": "0x",
        "logIndex": 9,
        "blockHash": "0xbfaaf3629f818d76a289c8f81941f07e2ffd8cbe1fc3c8eb560c3bfadf35be74"
      }
    ],
    "blockNumber": 24571238,
    "cumulativeGasUsed": "3507134",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x2c2bc76B97BCe84A5a9c6e2835AB13306B964cf1",
    "0x5ADBd44Ab2d173D45C829D9F83148D4E4Dd552CE",
    "0x71e26d0E519D14591b9dE9a0fE9513A398101490",
    "0x71e26d0E519D14591b9dE9a0fE9513A398101490",
    "0xD355A00220FbA16b69Cd8C4fbE16E02CA855f928"
  ],
  "numDeployments": 1,
  "solcInputHash": "9bb1cf41b880d3fe45dd9e4c19c88ca5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardsDistribution\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardsToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stakingToken\",\"type\":\"address\"},{\"internalType\":\"contract IRomulusDelegate\",\"name\":\"_romulusDelegate\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"previousDelegateIdx\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"nextDelegateIdx\",\"type\":\"uint8\"}],\"name\":\"DelegateIdxChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerNominated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Recovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousRewardsDistribution\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nextRewardsDistribution\",\"type\":\"address\"}],\"name\":\"RewardsDistributionChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDuration\",\"type\":\"uint256\"}],\"name\":\"RewardsDurationUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"nextIdx\",\"type\":\"uint8\"}],\"name\":\"changeDelegateIdx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"delegates\",\"outputs\":[{\"internalType\":\"contract Voter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardForDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTimeRewardApplicable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"nominateNewOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nominatedOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"notifyRewardAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"periodFinish\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerTokenStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsDistribution\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardsDistribution\",\"type\":\"address\"}],\"name\":\"setRewardsDistribution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardsDuration\",\"type\":\"uint256\"}],\"name\":\"setRewardsDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"supportOf\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userDelegateIdx\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userRewardPerTokenPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/votable-staking/VotableStakingRewards.sol\":\"VotableStakingRewards\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/interfaces/IVotingDelegates.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.3;\\n\\n/**\\n * Interface for a contract that keeps track of voting delegates.\\n */\\ninterface IVotingDelegates {\\n    /// @notice An event thats emitted when an account changes its delegate\\n    event DelegateChanged(\\n        address indexed delegator,\\n        address indexed fromDelegate,\\n        address indexed toDelegate\\n    );\\n\\n    /// @notice An event thats emitted when a delegate account's vote balance changes\\n    event DelegateVotesChanged(\\n        address indexed delegate,\\n        uint256 previousBalance,\\n        uint256 newBalance\\n    );\\n\\n    /// @notice An event emitted when an account's voting power is transferred.\\n    // - If `from` is `address(0)`, power was minted.\\n    // - If `to` is `address(0)`, power was burned.\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n    /// @notice Name of the contract.\\n    // Required for signing.\\n    function name() external view returns (string memory);\\n\\n    /// @notice A record of each accounts delegate\\n    function delegates(address delegatee) external view returns (address);\\n\\n    /**\\n     * @notice Delegate votes from `msg.sender` to `delegatee`\\n     * @param delegatee The address to delegate votes to\\n     */\\n    function delegate(address delegatee) external;\\n\\n    /**\\n     * @notice Delegates votes from signatory to `delegatee`\\n     * @param delegatee The address to delegate votes to\\n     * @param nonce The contract state required to match the signature\\n     * @param expiry The time at which to expire the signature\\n     * @param v The recovery byte of the signature\\n     * @param r Half of the ECDSA signature pair\\n     * @param s Half of the ECDSA signature pair\\n     */\\n    function delegateBySig(\\n        address delegatee,\\n        uint256 nonce,\\n        uint256 expiry,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @notice Get the amount of voting power of an account\\n     * @param account The address of the account to get the balance of\\n     * @return The amount of voting power held\\n     */\\n    function votingPower(address account) external view returns (uint96);\\n\\n    /// @notice Total voting power in existence.\\n    function totalVotingPower() external view returns (uint96);\\n}\\n\",\"keccak256\":\"0x0de81710d4c2bf47b34c0fe3d4dfa28891d931758280c1260344117965a5a634\",\"license\":\"MIT\"},\"contracts/votable-staking/Owned.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.3;\\n\\n// https://docs.synthetix.io/contracts/source/contracts/owned\\ncontract Owned {\\n  address public owner;\\n  address public nominatedOwner;\\n\\n  constructor(address _owner) {\\n    require(_owner != address(0), \\\"Owner address cannot be 0\\\");\\n    owner = _owner;\\n    emit OwnerChanged(address(0), _owner);\\n  }\\n\\n  function nominateNewOwner(address _owner) external onlyOwner {\\n    nominatedOwner = _owner;\\n    emit OwnerNominated(_owner);\\n  }\\n\\n  function acceptOwnership() external {\\n    require(\\n      msg.sender == nominatedOwner,\\n      \\\"You must be nominated before you can accept ownership\\\"\\n    );\\n    emit OwnerChanged(owner, nominatedOwner);\\n    owner = nominatedOwner;\\n    nominatedOwner = address(0);\\n  }\\n\\n  modifier onlyOwner() {\\n    _onlyOwner();\\n    _;\\n  }\\n\\n  function _onlyOwner() private view {\\n    require(\\n      msg.sender == owner,\\n      \\\"Only the contract owner may perform this action\\\"\\n    );\\n  }\\n\\n  event OwnerNominated(address newOwner);\\n  event OwnerChanged(address oldOwner, address newOwner);\\n}\\n\",\"keccak256\":\"0x598002f1af4d13155be09a07714bbda6ce0a7a44b16e9d91a371ffb15ae1da8e\",\"license\":\"MIT\"},\"contracts/votable-staking/RewardsDistributionRecipient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.3;\\n\\n// Inheritance\\nimport \\\"./Owned.sol\\\";\\n\\n// https://docs.synthetix.io/contracts/source/contracts/rewardsdistributionrecipient\\nabstract contract RewardsDistributionRecipient is Owned {\\n  address public rewardsDistribution;\\n\\n  event RewardsDistributionChanged(\\n    address indexed previousRewardsDistribution,\\n    address indexed nextRewardsDistribution\\n  );\\n\\n  function notifyRewardAmount(uint256 reward) external virtual;\\n\\n  modifier onlyRewardsDistribution() {\\n    require(\\n      msg.sender == rewardsDistribution,\\n      \\\"Caller is not RewardsDistribution contract\\\"\\n    );\\n    _;\\n  }\\n\\n  function setRewardsDistribution(address _rewardsDistribution)\\n    external\\n    onlyOwner\\n  {\\n    address previousRewardsDistribution = rewardsDistribution;\\n    rewardsDistribution = _rewardsDistribution;\\n    emit RewardsDistributionChanged(\\n      previousRewardsDistribution,\\n      rewardsDistribution\\n    );\\n  }\\n}\\n\",\"keccak256\":\"0x7bd15e33fde7f4f1225516ddaa6a94583997c583dc65189d653d9aa44f692e4e\",\"license\":\"MIT\"},\"contracts/votable-staking/VotableStakingRewards.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// solhint-disable not-rely-on-time\\n\\npragma solidity ^0.8.3;\\n\\nimport \\\"./openzeppelin-contracts-4.3/Math.sol\\\";\\nimport \\\"./openzeppelin-contracts-4.3/SafeMath.sol\\\";\\nimport \\\"./openzeppelin-contracts-4.3/SafeERC20.sol\\\";\\nimport \\\"./openzeppelin-contracts-4.3/ReentrancyGuard.sol\\\";\\n\\nimport \\\"./interfaces/IRomulusDelegate.sol\\\";\\nimport \\\"./interfaces/IStakingRewards.sol\\\";\\nimport \\\"./RewardsDistributionRecipient.sol\\\";\\nimport \\\"./Voter.sol\\\";\\n\\n// Base: https://github.com/Ubeswap/ubeswap-farming/blob/master/contracts/synthetix/contracts/StakingRewards.sol\\ncontract VotableStakingRewards is\\n  IStakingRewards,\\n  RewardsDistributionRecipient,\\n  ReentrancyGuard\\n{\\n  using SafeMath for uint256;\\n  using SafeERC20 for IERC20;\\n\\n  /* ========== STATE VARIABLES ========== */\\n\\n  IERC20 public rewardsToken;\\n  IERC20 public stakingToken;\\n  uint256 public periodFinish = 0;\\n  uint256 public rewardRate = 0;\\n  uint256 public rewardsDuration = 7 days;\\n  uint256 public lastUpdateTime;\\n  uint256 public rewardPerTokenStored;\\n\\n  mapping(address => uint256) public userRewardPerTokenPaid;\\n  mapping(address => uint256) public rewards;\\n\\n  uint256 private _totalSupply;\\n  mapping(address => uint256) private _balances;\\n\\n  // Voters\\n  // 0 - Abstain\\n  // 1 - For\\n  // 2 - Against\\n  Voter[3] public delegates;\\n  mapping(address => uint8) public userDelegateIdx;\\n\\n  /* ========== CONSTRUCTOR ========== */\\n\\n  constructor(\\n    address _owner,\\n    address _rewardsDistribution,\\n    address _rewardsToken,\\n    address _stakingToken,\\n    IRomulusDelegate _romulusDelegate\\n  ) Owned(_owner) {\\n    rewardsToken = IERC20(_rewardsToken);\\n    stakingToken = IERC20(_stakingToken);\\n    rewardsDistribution = _rewardsDistribution;\\n\\n    delegates[0] = new Voter(\\n      2, // Abstain\\n      IVotingDelegates(_stakingToken),\\n      _romulusDelegate\\n    );\\n    delegates[1] = new Voter(\\n      1, // For\\n      IVotingDelegates(_stakingToken),\\n      _romulusDelegate\\n    );\\n    delegates[2] = new Voter(\\n      0, // Against\\n      IVotingDelegates(_stakingToken),\\n      _romulusDelegate\\n    );\\n  }\\n\\n  /* ========== VIEWS ========== */\\n\\n  function supportOf(address account) external view returns (uint8) {\\n    return delegates[userDelegateIdx[account]].support();\\n  }\\n\\n  function totalSupply() external view override returns (uint256) {\\n    return _totalSupply;\\n  }\\n\\n  function balanceOf(address account) external view override returns (uint256) {\\n    return _balances[account];\\n  }\\n\\n  function lastTimeRewardApplicable() public view override returns (uint256) {\\n    return Math.min(block.timestamp, periodFinish);\\n  }\\n\\n  function rewardPerToken() public view override returns (uint256) {\\n    if (_totalSupply == 0) {\\n      return rewardPerTokenStored;\\n    }\\n    return\\n      rewardPerTokenStored.add(\\n        lastTimeRewardApplicable()\\n          .sub(lastUpdateTime)\\n          .mul(rewardRate)\\n          .mul(1e18)\\n          .div(_totalSupply)\\n      );\\n  }\\n\\n  function earned(address account) public view override returns (uint256) {\\n    return\\n      _balances[account]\\n        .mul(rewardPerToken().sub(userRewardPerTokenPaid[account]))\\n        .div(1e18)\\n        .add(rewards[account]);\\n  }\\n\\n  function getRewardForDuration() external view override returns (uint256) {\\n    return rewardRate.mul(rewardsDuration);\\n  }\\n\\n  /* ========== MUTATIVE FUNCTIONS ========== */\\n\\n  function stake(uint256 amount)\\n    external\\n    override\\n    nonReentrant\\n    updateReward(msg.sender)\\n  {\\n    require(amount > 0, \\\"Cannot stake 0\\\");\\n    _totalSupply = _totalSupply.add(amount);\\n    _balances[msg.sender] = _balances[msg.sender].add(amount);\\n    stakingToken.safeTransferFrom(msg.sender, address(this), amount);\\n\\n    Voter v = delegates[userDelegateIdx[msg.sender]];\\n    require(\\n      stakingToken.approve(address(v), amount),\\n      \\\"Approve to voter failed\\\"\\n    );\\n    v.addVotes(amount);\\n\\n    emit Staked(msg.sender, amount);\\n  }\\n\\n  function withdraw(uint256 amount)\\n    public\\n    override\\n    nonReentrant\\n    updateReward(msg.sender)\\n  {\\n    require(amount > 0, \\\"Cannot withdraw 0\\\");\\n    _totalSupply = _totalSupply.sub(amount);\\n    _balances[msg.sender] = _balances[msg.sender].sub(amount);\\n\\n    Voter v = delegates[userDelegateIdx[msg.sender]];\\n    v.removeVotes(amount);\\n\\n    stakingToken.safeTransfer(msg.sender, amount);\\n    emit Withdrawn(msg.sender, amount);\\n  }\\n\\n  function changeDelegateIdx(uint8 nextIdx) external nonReentrant {\\n    require(nextIdx < 3, \\\"newDelegateIdx out of bounds.\\\");\\n    uint8 previousIdx = userDelegateIdx[msg.sender];\\n    Voter previous = delegates[previousIdx];\\n    uint256 balance = _balances[msg.sender];\\n    previous.removeVotes(balance);\\n\\n    Voter next = delegates[nextIdx];\\n    require(\\n      stakingToken.approve(address(next), balance),\\n      \\\"Approve to voter failed\\\"\\n    );\\n    next.addVotes(balance);\\n\\n    userDelegateIdx[msg.sender] = nextIdx;\\n    emit DelegateIdxChanged(previousIdx, nextIdx);\\n  }\\n\\n  function getReward() public override nonReentrant updateReward(msg.sender) {\\n    uint256 reward = rewards[msg.sender];\\n    if (reward > 0) {\\n      rewards[msg.sender] = 0;\\n      rewardsToken.safeTransfer(msg.sender, reward);\\n      emit RewardPaid(msg.sender, reward);\\n    }\\n  }\\n\\n  function exit() external override {\\n    withdraw(_balances[msg.sender]);\\n    getReward();\\n  }\\n\\n  /* ========== RESTRICTED FUNCTIONS ========== */\\n\\n  function notifyRewardAmount(uint256 reward)\\n    external\\n    override\\n    onlyRewardsDistribution\\n    updateReward(address(0))\\n  {\\n    if (block.timestamp >= periodFinish) {\\n      rewardRate = reward.div(rewardsDuration);\\n    } else {\\n      uint256 remaining = periodFinish.sub(block.timestamp);\\n      uint256 leftover = remaining.mul(rewardRate);\\n      rewardRate = reward.add(leftover).div(rewardsDuration);\\n    }\\n\\n    // Ensure the provided reward amount is not more than the balance in the contract.\\n    // This keeps the reward rate in the right range, preventing overflows due to\\n    // very high values of rewardRate in the earned and rewardsPerToken functions;\\n    // Reward + leftover must be less than 2^256 / 10^18 to avoid overflow.\\n    uint256 balance = rewardsToken.balanceOf(address(this));\\n    require(\\n      rewardRate <= balance.div(rewardsDuration),\\n      \\\"Provided reward too high\\\"\\n    );\\n\\n    lastUpdateTime = block.timestamp;\\n    periodFinish = block.timestamp.add(rewardsDuration);\\n    emit RewardAdded(reward);\\n  }\\n\\n  // Added to support recovering LP Rewards from other systems such as BAL to be distributed to holders\\n  function recoverERC20(address tokenAddress, uint256 tokenAmount)\\n    external\\n    onlyOwner\\n  {\\n    require(\\n      tokenAddress != address(stakingToken),\\n      \\\"Cannot withdraw the staking token\\\"\\n    );\\n    IERC20(tokenAddress).safeTransfer(owner, tokenAmount);\\n    emit Recovered(tokenAddress, tokenAmount);\\n  }\\n\\n  function setRewardsDuration(uint256 _rewardsDuration) external onlyOwner {\\n    require(\\n      block.timestamp > periodFinish,\\n      \\\"Previous rewards period must be complete before changing the duration for the new period\\\"\\n    );\\n    rewardsDuration = _rewardsDuration;\\n    emit RewardsDurationUpdated(rewardsDuration);\\n  }\\n\\n  /* ========== MODIFIERS ========== */\\n\\n  modifier updateReward(address account) {\\n    rewardPerTokenStored = rewardPerToken();\\n    lastUpdateTime = lastTimeRewardApplicable();\\n    if (account != address(0)) {\\n      rewards[account] = earned(account);\\n      userRewardPerTokenPaid[account] = rewardPerTokenStored;\\n    }\\n    _;\\n  }\\n\\n  /* ========== EVENTS ========== */\\n\\n  event RewardAdded(uint256 reward);\\n  event Staked(address indexed user, uint256 amount);\\n  event Withdrawn(address indexed user, uint256 amount);\\n  event RewardPaid(address indexed user, uint256 reward);\\n  event RewardsDurationUpdated(uint256 newDuration);\\n  event Recovered(address token, uint256 amount);\\n  event DelegateIdxChanged(uint8 previousDelegateIdx, uint8 nextDelegateIdx);\\n}\\n\",\"keccak256\":\"0xdbe75eb5978cee2fc8c07bee203f8914a76169e3c2cde17e27d6ec5c4c139e1c\",\"license\":\"MIT\"},\"contracts/votable-staking/Voter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.3;\\n\\nimport \\\"./openzeppelin-contracts-4.3/SafeERC20.sol\\\";\\nimport \\\"./openzeppelin-contracts-4.3/Ownable.sol\\\";\\nimport \\\"../interfaces/IVotingDelegates.sol\\\";\\nimport \\\"./interfaces/IERC20.sol\\\";\\nimport \\\"./interfaces/IRomulusDelegate.sol\\\";\\n\\ncontract Voter is Ownable {\\n  using SafeERC20 for IERC20;\\n\\n  uint8 public immutable support;\\n  IVotingDelegates public immutable votingToken;\\n  IRomulusDelegate public immutable romulusDelegate;\\n\\n  constructor(\\n    uint8 _support,\\n    IVotingDelegates _votingToken,\\n    IRomulusDelegate _romulusDelegate\\n  ) {\\n    support = _support;\\n    votingToken = _votingToken;\\n    romulusDelegate = _romulusDelegate;\\n\\n    _votingToken.delegate(address(this));\\n  }\\n\\n  function addVotes(uint256 amount) external onlyOwner {\\n    IERC20(address(votingToken)).safeTransferFrom(\\n      msg.sender,\\n      address(this),\\n      amount\\n    );\\n  }\\n\\n  function removeVotes(uint256 amount) external onlyOwner {\\n    IERC20(address(votingToken)).safeTransfer(msg.sender, amount);\\n  }\\n\\n  function castVote(uint256 proposalId) external {\\n    romulusDelegate.castVote(proposalId, support);\\n  }\\n}\\n\",\"keccak256\":\"0x3599b1a4678537cfa0d3eddc8ba652abe422e9928e4ade48df55e4606e36b4ca\",\"license\":\"MIT\"},\"contracts/votable-staking/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"contracts/votable-staking/interfaces/IRomulusDelegate.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.3;\\n\\ninterface IRomulusDelegate {\\n  function castVote(uint256 proposalId, uint8 support) external;\\n}\\n\",\"keccak256\":\"0x29a7368f7cc5c9056aa1c3f282e4d8daf10c3b5722c2c6440dc89c9eef9973f7\",\"license\":\"MIT\"},\"contracts/votable-staking/interfaces/IStakingRewards.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.4.24;\\n\\ninterface IStakingRewards {\\n  // Views\\n  function lastTimeRewardApplicable() external view returns (uint256);\\n\\n  function rewardPerToken() external view returns (uint256);\\n\\n  function earned(address account) external view returns (uint256);\\n\\n  function getRewardForDuration() external view returns (uint256);\\n\\n  function totalSupply() external view returns (uint256);\\n\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  // Mutative\\n\\n  function stake(uint256 amount) external;\\n\\n  function withdraw(uint256 amount) external;\\n\\n  function getReward() external;\\n\\n  function exit() external;\\n}\\n\",\"keccak256\":\"0x30cc839e66291e635f584af77c8932ffce5d2fe1a4eee8dd653955e53fd7a7ca\",\"license\":\"MIT\"},\"contracts/votable-staking/openzeppelin-contracts-4.3/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"contracts/votable-staking/openzeppelin-contracts-4.3/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"contracts/votable-staking/openzeppelin-contracts-4.3/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0x49ebdac5d515aebb95168564158940b79d7d5d12fbfe59cec546a00d57fee64a\",\"license\":\"MIT\"},\"contracts/votable-staking/openzeppelin-contracts-4.3/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x75d1e6250c190ca0500e5a2b7def5e5d6fd3edbe368a6de93dea256471d04593\",\"license\":\"MIT\"},\"contracts/votable-staking/openzeppelin-contracts-4.3/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x842ccf9a6cd33e17b7acef8372ca42090755217b358fe0c44c98e951ea549d3a\",\"license\":\"MIT\"},\"contracts/votable-staking/openzeppelin-contracts-4.3/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6474bed044bc3c77a1c56f58de1dbad531c8b1a0ec6701ba30746c7af7d16c3b\",\"license\":\"MIT\"},\"contracts/votable-staking/openzeppelin-contracts-4.3/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8666f020bd8fc9dc14f07e2ebc52b5f236ab4cdde7c77679b08cb2f94730043b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526000600655600060075562093a806008553480156200002257600080fd5b5060405162002774380380620027748339810160408190526200004591620002c7565b846001600160a01b038116620000a15760405162461bcd60e51b815260206004820152601960248201527f4f776e657220616464726573732063616e6e6f74206265203000000000000000604482015260640160405180910390fd5b600080546001600160a01b0319166001600160a01b03831690811782556040805192835260208301919091527fb532073b38c83145e3e5135377a08bf9aab55bc0fd7c1179cd4fb995d2a5159c910160405180910390a1506001600355600480546001600160a01b038086166001600160a01b031992831617909255600580548584169083161790556002805492871692909116919091178155604051839083906200014d90620002a0565b60ff90931683526001600160a01b039182166020840152166040820152606001604051809103906000f0801580156200018a573d6000803e3d6000fd5b50600f80546001600160a01b0319166001600160a01b039290921691909117905560405160019083908390620001c090620002a0565b60ff90931683526001600160a01b039182166020840152166040820152606001604051809103906000f080158015620001fd573d6000803e3d6000fd5b50601080546001600160a01b0319166001600160a01b0392909216919091179055604051600090839083906200023390620002a0565b60ff90931683526001600160a01b039182166020840152166040820152606001604051809103906000f08015801562000270573d6000803e3d6000fd5b50600f60020180546001600160a01b0319166001600160a01b039290921691909117905550620003479350505050565b610a0f8062001d6583390190565b6001600160a01b0381168114620002c457600080fd5b50565b600080600080600060a08688031215620002e057600080fd5b8551620002ed81620002ae565b60208701519095506200030081620002ae565b60408701519094506200031381620002ae565b60608701519093506200032681620002ae565b60808701519092506200033981620002ae565b809150509295509295909350565b611a0e80620003576000396000f3fe608060405234801561001057600080fd5b50600436106101ef5760003560e01c806379ba50971161010f578063c8f33c91116100a2578063dee6fd6011610071578063dee6fd6014610427578063df136d651461043a578063e9fad8ee14610443578063ebe2b12b1461044b57600080fd5b8063c8f33c91146103f0578063cc1a378f146103f9578063cd3daf9d1461040c578063d1af0c7d1461041457600080fd5b80638b876347116100de5780638b876347146103975780638da5cb5b146103b7578063a694fc3a146103ca578063b1548afc146103dd57600080fd5b806379ba50971461036b5780637b0a47ee1461037357806380faa57d1461037c5780638980f11f1461038457600080fd5b80633702b616116101875780633fc6df6e116101565780633fc6df6e146102f157806353a47bb71461031c57806370a082311461032f57806372f702f31461035857600080fd5b80633702b616146102ba578063386a9525146102cd5780633c6b16ab146102d65780633d18b912146102e957600080fd5b806319762143116101c357806319762143146102575780631c1f78eb1461026a57806326fcc94a146102725780632e1a7d4d146102a757600080fd5b80628cc262146101f45780630700037d1461021a5780631627540c1461023a57806318160ddd1461024f575b600080fd5b6102076102023660046117be565b610454565b6040519081526020015b60405180910390f35b6102076102283660046117be565b600c6020526000908152604090205481565b61024d6102483660046117be565b6104d2565b005b600d54610207565b61024d6102653660046117be565b61052f565b610207610589565b6102956102803660046117be565b60126020526000908152604090205460ff1681565b60405160ff9091168152602001610211565b61024d6102b53660046117d9565b6105a7565b61024d6102c8366004611804565b61078c565b61020760085481565b61024d6102e43660046117d9565b610a3d565b61024d610c90565b600254610304906001600160a01b031681565b6040516001600160a01b039091168152602001610211565b600154610304906001600160a01b031681565b61020761033d3660046117be565b6001600160a01b03166000908152600e602052604090205490565b600554610304906001600160a01b031681565b61024d610d90565b61020760075481565b610207610e7a565b61024d610392366004611821565b610e88565b6102076103a53660046117be565b600b6020526000908152604090205481565b600054610304906001600160a01b031681565b61024d6103d83660046117d9565b610f58565b6103046103eb3660046117d9565b6111e6565b61020760095481565b61024d6104073660046117d9565b611206565b6102076112e0565b600454610304906001600160a01b031681565b6102956104353660046117be565b61132b565b610207600a5481565b61024d6113d0565b61020760065481565b6001600160a01b0381166000908152600c6020908152604080832054600b9092528220546104cc91906104c690670de0b6b3a7640000906104c0906104a19061049b6112e0565b906113f3565b6001600160a01b0388166000908152600e602052604090205490611406565b90611412565b9061141e565b92915050565b6104da61142a565b600180546001600160a01b0319166001600160a01b0383169081179091556040519081527f906a1c6bd7e3091ea86693dd029a831c19049ce77f1dce2ce0bab1cacbabce22906020015b60405180910390a150565b61053761142a565b600280546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f7cd0eff38c2bfa946cee93bb97833afb376387f4d6c0df35a7fb8b20b3f3ece190600090a35050565b60006105a260085460075461140690919063ffffffff16565b905090565b6002600354036105d25760405162461bcd60e51b81526004016105c99061184b565b60405180910390fd5b6002600355336105e06112e0565b600a556105eb610e7a565b6009556001600160a01b038116156106325761060681610454565b6001600160a01b0382166000908152600c6020908152604080832093909355600a54600b909152919020555b600082116106765760405162461bcd60e51b8152602060048201526011602482015270043616e6e6f74207769746864726177203607c1b60448201526064016105c9565b600d5461068390836113f3565b600d55336000908152600e60205260409020546106a090836113f3565b336000908152600e60209081526040808320939093556012905290812054600f9060ff16600381106106d4576106d4611882565b0154604051630e81c8b560e31b8152600481018590526001600160a01b039091169150819063740e45a890602401600060405180830381600087803b15801561071c57600080fd5b505af1158015610730573d6000803e3d6000fd5b505060055461074c92506001600160a01b03169050338561149c565b60405183815233907f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d5906020015b60405180910390a25050600160035550565b6002600354036107ae5760405162461bcd60e51b81526004016105c99061184b565b6002600390815560ff8216106108065760405162461bcd60e51b815260206004820152601d60248201527f6e657744656c6567617465496478206f7574206f6620626f756e64732e00000060448201526064016105c9565b3360009081526012602052604081205460ff1690600f826003811061082d5761082d611882565b0154336000908152600e602052604090819020549051630e81c8b560e31b8152600481018290526001600160a01b03909216925090829063740e45a890602401600060405180830381600087803b15801561088757600080fd5b505af115801561089b573d6000803e3d6000fd5b505050506000600f8560ff16600381106108b7576108b7611882565b015460055460405163095ea7b360e01b81526001600160a01b039283166004820181905260248201869052935091169063095ea7b3906044016020604051808303816000875af115801561090f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109339190611898565b6109795760405162461bcd60e51b8152602060048201526017602482015276105c1c1c9bdd99481d1bc81d9bdd195c8819985a5b1959604a1b60448201526064016105c9565b6040516325286fa760e21b8152600481018390526001600160a01b038216906394a1be9c90602401600060405180830381600087803b1580156109bb57600080fd5b505af11580156109cf573d6000803e3d6000fd5b505033600090815260126020908152604091829020805460ff191660ff8b81169182179092558351918a168252918101919091527f326999ca27a19c4177665d55ec90a8c9a1c2b393e30837e37db589071e06f1b1935001905060405180910390a150506001600355505050565b6002546001600160a01b03163314610aaa5760405162461bcd60e51b815260206004820152602a60248201527f43616c6c6572206973206e6f742052657761726473446973747269627574696f6044820152691b8818dbdb9d1c9858dd60b21b60648201526084016105c9565b6000610ab46112e0565b600a55610abf610e7a565b6009556001600160a01b03811615610b0657610ada81610454565b6001600160a01b0382166000908152600c6020908152604080832093909355600a54600b909152919020555b6006544210610b2557600854610b1d908390611412565b600755610b68565b600654600090610b3590426113f3565b90506000610b4e6007548361140690919063ffffffff16565b600854909150610b62906104c0868461141e565b60075550505b600480546040516370a0823160e01b815230928101929092526000916001600160a01b03909116906370a0823190602401602060405180830381865afa158015610bb6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bda91906118ba565b9050610bf16008548261141290919063ffffffff16565b6007541115610c425760405162461bcd60e51b815260206004820152601860248201527f50726f76696465642072657761726420746f6f2068696768000000000000000060448201526064016105c9565b426009819055600854610c55919061141e565b6006556040518381527fde88a922e0d3b88b24e9623efeb464919c6bf9f66857a65e2bfcf2ce87a9433d9060200160405180910390a1505050565b600260035403610cb25760405162461bcd60e51b81526004016105c99061184b565b600260035533610cc06112e0565b600a55610ccb610e7a565b6009556001600160a01b03811615610d1257610ce681610454565b6001600160a01b0382166000908152600c6020908152604080832093909355600a54600b909152919020555b336000908152600c60205260409020548015610d8757336000818152600c6020526040812055600454610d51916001600160a01b03909116908361149c565b60405181815233907fe2403640ba68fed3a2f88b7557551d1993f84b99bb10ff833f0cf8db0c5e04869060200160405180910390a25b50506001600355565b6001546001600160a01b03163314610e085760405162461bcd60e51b815260206004820152603560248201527f596f75206d757374206265206e6f6d696e61746564206265666f726520796f7560448201527402063616e20616363657074206f776e65727368697605c1b60648201526084016105c9565b600054600154604080516001600160a01b0393841681529290911660208301527fb532073b38c83145e3e5135377a08bf9aab55bc0fd7c1179cd4fb995d2a5159c910160405180910390a160018054600080546001600160a01b03199081166001600160a01b03841617909155169055565b60006105a242600654611504565b610e9061142a565b6005546001600160a01b0390811690831603610ef85760405162461bcd60e51b815260206004820152602160248201527f43616e6e6f7420776974686472617720746865207374616b696e6720746f6b656044820152603760f91b60648201526084016105c9565b600054610f12906001600160a01b0384811691168361149c565b604080516001600160a01b0384168152602081018390527f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa28910160405180910390a15050565b600260035403610f7a5760405162461bcd60e51b81526004016105c99061184b565b600260035533610f886112e0565b600a55610f93610e7a565b6009556001600160a01b03811615610fda57610fae81610454565b6001600160a01b0382166000908152600c6020908152604080832093909355600a54600b909152919020555b6000821161101b5760405162461bcd60e51b815260206004820152600e60248201526d043616e6e6f74207374616b6520360941b60448201526064016105c9565b600d54611028908361141e565b600d55336000908152600e6020526040902054611045908361141e565b336000818152600e6020526040902091909155600554611072916001600160a01b0390911690308561151a565b33600090815260126020526040812054600f9060ff166003811061109857611098611882565b015460055460405163095ea7b360e01b81526001600160a01b039283166004820181905260248201879052935091169063095ea7b3906044016020604051808303816000875af11580156110f0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111149190611898565b61115a5760405162461bcd60e51b8152602060048201526017602482015276105c1c1c9bdd99481d1bc81d9bdd195c8819985a5b1959604a1b60448201526064016105c9565b6040516325286fa760e21b8152600481018490526001600160a01b038216906394a1be9c90602401600060405180830381600087803b15801561119c57600080fd5b505af11580156111b0573d6000803e3d6000fd5b50506040518581523392507f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d915060200161077a565b600f81600381106111f657600080fd5b01546001600160a01b0316905081565b61120e61142a565b60065442116112ab5760405162461bcd60e51b815260206004820152605860248201527f50726576696f7573207265776172647320706572696f64206d7573742062652060448201527f636f6d706c657465206265666f7265206368616e67696e67207468652064757260648201527f6174696f6e20666f7220746865206e657720706572696f640000000000000000608482015260a4016105c9565b60088190556040518181527ffb46ca5a5e06d4540d6387b930a7c978bce0db5f449ec6b3f5d07c6e1d44f2d390602001610524565b6000600d546000036112f35750600a5490565b6105a2611322600d546104c0670de0b6b3a764000061131c60075461131c60095461049b610e7a565b90611406565b600a549061141e565b6001600160a01b038116600090815260126020526040812054600f9060ff166003811061135a5761135a611882565b0160009054906101000a90046001600160a01b03166001600160a01b031663119f87476040518163ffffffff1660e01b8152600401602060405180830381865afa1580156113ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104cc91906118d3565b336000908152600e60205260409020546113e9906105a7565b6113f1610c90565b565b60006113ff8284611906565b9392505050565b60006113ff8284611919565b60006113ff8284611930565b60006113ff8284611952565b6000546001600160a01b031633146113f15760405162461bcd60e51b815260206004820152602f60248201527f4f6e6c792074686520636f6e7472616374206f776e6572206d6179207065726660448201526e37b936903a3434b99030b1ba34b7b760891b60648201526084016105c9565b6040516001600160a01b0383166024820152604481018290526114ff90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611558565b505050565b600081831061151357816113ff565b5090919050565b6040516001600160a01b03808516602483015283166044820152606481018290526115529085906323b872dd60e01b906084016114c8565b50505050565b60006115ad826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661162a9092919063ffffffff16565b8051909150156114ff57808060200190518101906115cb9190611898565b6114ff5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016105c9565b60606116398484600085611641565b949350505050565b6060824710156116a25760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016105c9565b843b6116f05760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016105c9565b600080866001600160a01b0316858760405161170c9190611989565b60006040518083038185875af1925050503d8060008114611749576040519150601f19603f3d011682016040523d82523d6000602084013e61174e565b606091505b509150915061175e828286611769565b979650505050505050565b606083156117785750816113ff565b8251156117885782518084602001fd5b8160405162461bcd60e51b81526004016105c991906119a5565b80356001600160a01b03811681146117b957600080fd5b919050565b6000602082840312156117d057600080fd5b6113ff826117a2565b6000602082840312156117eb57600080fd5b5035919050565b60ff8116811461180157600080fd5b50565b60006020828403121561181657600080fd5b81356113ff816117f2565b6000806040838503121561183457600080fd5b61183d836117a2565b946020939093013593505050565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b634e487b7160e01b600052603260045260246000fd5b6000602082840312156118aa57600080fd5b815180151581146113ff57600080fd5b6000602082840312156118cc57600080fd5b5051919050565b6000602082840312156118e557600080fd5b81516113ff816117f2565b634e487b7160e01b600052601160045260246000fd5b818103818111156104cc576104cc6118f0565b80820281158282048414176104cc576104cc6118f0565b60008261194d57634e487b7160e01b600052601260045260246000fd5b500490565b808201808211156104cc576104cc6118f0565b60005b83811015611980578181015183820152602001611968565b50506000910152565b6000825161199b818460208701611965565b9190910192915050565b60208152600082518060208401526119c4816040850160208701611965565b601f01601f1916919091016040019291505056fea264697066735822122003e02dfb5eec1988d26aa3124be5c8831f071f71cb248c8210fbc53e9827f51564736f6c6343000817003360e060405234801561001057600080fd5b50604051610a0f380380610a0f83398101604081905261002f91610113565b610038336100ab565b60ff83166080526001600160a01b0382811660a081905290821660c0526040516317066a5760e21b8152306004820152635c19a95c90602401600060405180830381600087803b15801561008b57600080fd5b505af115801561009f573d6000803e3d6000fd5b50505050505050610166565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b038116811461011057600080fd5b50565b60008060006060848603121561012857600080fd5b835160ff8116811461013957600080fd5b602085015190935061014a816100fb565b604085015190925061015b816100fb565b809150509250925092565b60805160a05160c0516108606101af6000396000818160db01526101e201526000818161016e015281816102bf0152610320015260008181609d01526101bb01526108606000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c8063740e45a811610066578063740e45a8146101325780638da5cb5b1461014557806394a1be9c14610156578063b034012314610169578063f2fde38b1461019057600080fd5b8063119f8747146100985780633310c7df146100d65780633eb76b9c14610115578063715018a61461012a575b600080fd5b6100bf7f000000000000000000000000000000000000000000000000000000000000000081565b60405160ff90911681526020015b60405180910390f35b6100fd7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016100cd565b61012861012336600461071e565b6101a3565b005b610128610249565b61012861014036600461071e565b610288565b6000546001600160a01b03166100fd565b61012861016436600461071e565b6102e9565b6100fd7f000000000000000000000000000000000000000000000000000000000000000081565b61012861019e366004610737565b610348565b604051630acf027160e31b81526004810182905260ff7f00000000000000000000000000000000000000000000000000000000000000001660248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690635678138890604401600060405180830381600087803b15801561022e57600080fd5b505af1158015610242573d6000803e3d6000fd5b5050505050565b6000546001600160a01b0316331461027c5760405162461bcd60e51b815260040161027390610760565b60405180910390fd5b61028660006103dc565b565b6000546001600160a01b031633146102b25760405162461bcd60e51b815260040161027390610760565b6102e66001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016338361042c565b50565b6000546001600160a01b031633146103135760405162461bcd60e51b815260040161027390610760565b6102e66001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016333084610494565b6000546001600160a01b031633146103725760405162461bcd60e51b815260040161027390610760565b6001600160a01b0381166103d75760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610273565b6102e6815b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6040516001600160a01b03831660248201526044810182905261048f90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526104d2565b505050565b6040516001600160a01b03808516602483015283166044820152606481018290526104cc9085906323b872dd60e01b90608401610458565b50505050565b6000610527826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166105a49092919063ffffffff16565b80519091501561048f57808060200190518101906105459190610795565b61048f5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610273565b60606105b384846000856105bd565b90505b9392505050565b60608247101561061e5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610273565b843b61066c5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610273565b600080866001600160a01b0316858760405161068891906107db565b60006040518083038185875af1925050503d80600081146106c5576040519150601f19603f3d011682016040523d82523d6000602084013e6106ca565b606091505b50915091506106da8282866106e5565b979650505050505050565b606083156106f45750816105b6565b8251156107045782518084602001fd5b8160405162461bcd60e51b815260040161027391906107f7565b60006020828403121561073057600080fd5b5035919050565b60006020828403121561074957600080fd5b81356001600160a01b03811681146105b657600080fd5b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6000602082840312156107a757600080fd5b815180151581146105b657600080fd5b60005b838110156107d25781810151838201526020016107ba565b50506000910152565b600082516107ed8184602087016107b7565b9190910192915050565b60208152600082518060208401526108168160408501602087016107b7565b601f01601f1916919091016040019291505056fea264697066735822122088ecd2ebbe20409bc326d353b255948d3820638bcb24b7f00c22d576456f6c9664736f6c63430008170033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101ef5760003560e01c806379ba50971161010f578063c8f33c91116100a2578063dee6fd6011610071578063dee6fd6014610427578063df136d651461043a578063e9fad8ee14610443578063ebe2b12b1461044b57600080fd5b8063c8f33c91146103f0578063cc1a378f146103f9578063cd3daf9d1461040c578063d1af0c7d1461041457600080fd5b80638b876347116100de5780638b876347146103975780638da5cb5b146103b7578063a694fc3a146103ca578063b1548afc146103dd57600080fd5b806379ba50971461036b5780637b0a47ee1461037357806380faa57d1461037c5780638980f11f1461038457600080fd5b80633702b616116101875780633fc6df6e116101565780633fc6df6e146102f157806353a47bb71461031c57806370a082311461032f57806372f702f31461035857600080fd5b80633702b616146102ba578063386a9525146102cd5780633c6b16ab146102d65780633d18b912146102e957600080fd5b806319762143116101c357806319762143146102575780631c1f78eb1461026a57806326fcc94a146102725780632e1a7d4d146102a757600080fd5b80628cc262146101f45780630700037d1461021a5780631627540c1461023a57806318160ddd1461024f575b600080fd5b6102076102023660046117be565b610454565b6040519081526020015b60405180910390f35b6102076102283660046117be565b600c6020526000908152604090205481565b61024d6102483660046117be565b6104d2565b005b600d54610207565b61024d6102653660046117be565b61052f565b610207610589565b6102956102803660046117be565b60126020526000908152604090205460ff1681565b60405160ff9091168152602001610211565b61024d6102b53660046117d9565b6105a7565b61024d6102c8366004611804565b61078c565b61020760085481565b61024d6102e43660046117d9565b610a3d565b61024d610c90565b600254610304906001600160a01b031681565b6040516001600160a01b039091168152602001610211565b600154610304906001600160a01b031681565b61020761033d3660046117be565b6001600160a01b03166000908152600e602052604090205490565b600554610304906001600160a01b031681565b61024d610d90565b61020760075481565b610207610e7a565b61024d610392366004611821565b610e88565b6102076103a53660046117be565b600b6020526000908152604090205481565b600054610304906001600160a01b031681565b61024d6103d83660046117d9565b610f58565b6103046103eb3660046117d9565b6111e6565b61020760095481565b61024d6104073660046117d9565b611206565b6102076112e0565b600454610304906001600160a01b031681565b6102956104353660046117be565b61132b565b610207600a5481565b61024d6113d0565b61020760065481565b6001600160a01b0381166000908152600c6020908152604080832054600b9092528220546104cc91906104c690670de0b6b3a7640000906104c0906104a19061049b6112e0565b906113f3565b6001600160a01b0388166000908152600e602052604090205490611406565b90611412565b9061141e565b92915050565b6104da61142a565b600180546001600160a01b0319166001600160a01b0383169081179091556040519081527f906a1c6bd7e3091ea86693dd029a831c19049ce77f1dce2ce0bab1cacbabce22906020015b60405180910390a150565b61053761142a565b600280546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f7cd0eff38c2bfa946cee93bb97833afb376387f4d6c0df35a7fb8b20b3f3ece190600090a35050565b60006105a260085460075461140690919063ffffffff16565b905090565b6002600354036105d25760405162461bcd60e51b81526004016105c99061184b565b60405180910390fd5b6002600355336105e06112e0565b600a556105eb610e7a565b6009556001600160a01b038116156106325761060681610454565b6001600160a01b0382166000908152600c6020908152604080832093909355600a54600b909152919020555b600082116106765760405162461bcd60e51b8152602060048201526011602482015270043616e6e6f74207769746864726177203607c1b60448201526064016105c9565b600d5461068390836113f3565b600d55336000908152600e60205260409020546106a090836113f3565b336000908152600e60209081526040808320939093556012905290812054600f9060ff16600381106106d4576106d4611882565b0154604051630e81c8b560e31b8152600481018590526001600160a01b039091169150819063740e45a890602401600060405180830381600087803b15801561071c57600080fd5b505af1158015610730573d6000803e3d6000fd5b505060055461074c92506001600160a01b03169050338561149c565b60405183815233907f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d5906020015b60405180910390a25050600160035550565b6002600354036107ae5760405162461bcd60e51b81526004016105c99061184b565b6002600390815560ff8216106108065760405162461bcd60e51b815260206004820152601d60248201527f6e657744656c6567617465496478206f7574206f6620626f756e64732e00000060448201526064016105c9565b3360009081526012602052604081205460ff1690600f826003811061082d5761082d611882565b0154336000908152600e602052604090819020549051630e81c8b560e31b8152600481018290526001600160a01b03909216925090829063740e45a890602401600060405180830381600087803b15801561088757600080fd5b505af115801561089b573d6000803e3d6000fd5b505050506000600f8560ff16600381106108b7576108b7611882565b015460055460405163095ea7b360e01b81526001600160a01b039283166004820181905260248201869052935091169063095ea7b3906044016020604051808303816000875af115801561090f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109339190611898565b6109795760405162461bcd60e51b8152602060048201526017602482015276105c1c1c9bdd99481d1bc81d9bdd195c8819985a5b1959604a1b60448201526064016105c9565b6040516325286fa760e21b8152600481018390526001600160a01b038216906394a1be9c90602401600060405180830381600087803b1580156109bb57600080fd5b505af11580156109cf573d6000803e3d6000fd5b505033600090815260126020908152604091829020805460ff191660ff8b81169182179092558351918a168252918101919091527f326999ca27a19c4177665d55ec90a8c9a1c2b393e30837e37db589071e06f1b1935001905060405180910390a150506001600355505050565b6002546001600160a01b03163314610aaa5760405162461bcd60e51b815260206004820152602a60248201527f43616c6c6572206973206e6f742052657761726473446973747269627574696f6044820152691b8818dbdb9d1c9858dd60b21b60648201526084016105c9565b6000610ab46112e0565b600a55610abf610e7a565b6009556001600160a01b03811615610b0657610ada81610454565b6001600160a01b0382166000908152600c6020908152604080832093909355600a54600b909152919020555b6006544210610b2557600854610b1d908390611412565b600755610b68565b600654600090610b3590426113f3565b90506000610b4e6007548361140690919063ffffffff16565b600854909150610b62906104c0868461141e565b60075550505b600480546040516370a0823160e01b815230928101929092526000916001600160a01b03909116906370a0823190602401602060405180830381865afa158015610bb6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bda91906118ba565b9050610bf16008548261141290919063ffffffff16565b6007541115610c425760405162461bcd60e51b815260206004820152601860248201527f50726f76696465642072657761726420746f6f2068696768000000000000000060448201526064016105c9565b426009819055600854610c55919061141e565b6006556040518381527fde88a922e0d3b88b24e9623efeb464919c6bf9f66857a65e2bfcf2ce87a9433d9060200160405180910390a1505050565b600260035403610cb25760405162461bcd60e51b81526004016105c99061184b565b600260035533610cc06112e0565b600a55610ccb610e7a565b6009556001600160a01b03811615610d1257610ce681610454565b6001600160a01b0382166000908152600c6020908152604080832093909355600a54600b909152919020555b336000908152600c60205260409020548015610d8757336000818152600c6020526040812055600454610d51916001600160a01b03909116908361149c565b60405181815233907fe2403640ba68fed3a2f88b7557551d1993f84b99bb10ff833f0cf8db0c5e04869060200160405180910390a25b50506001600355565b6001546001600160a01b03163314610e085760405162461bcd60e51b815260206004820152603560248201527f596f75206d757374206265206e6f6d696e61746564206265666f726520796f7560448201527402063616e20616363657074206f776e65727368697605c1b60648201526084016105c9565b600054600154604080516001600160a01b0393841681529290911660208301527fb532073b38c83145e3e5135377a08bf9aab55bc0fd7c1179cd4fb995d2a5159c910160405180910390a160018054600080546001600160a01b03199081166001600160a01b03841617909155169055565b60006105a242600654611504565b610e9061142a565b6005546001600160a01b0390811690831603610ef85760405162461bcd60e51b815260206004820152602160248201527f43616e6e6f7420776974686472617720746865207374616b696e6720746f6b656044820152603760f91b60648201526084016105c9565b600054610f12906001600160a01b0384811691168361149c565b604080516001600160a01b0384168152602081018390527f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa28910160405180910390a15050565b600260035403610f7a5760405162461bcd60e51b81526004016105c99061184b565b600260035533610f886112e0565b600a55610f93610e7a565b6009556001600160a01b03811615610fda57610fae81610454565b6001600160a01b0382166000908152600c6020908152604080832093909355600a54600b909152919020555b6000821161101b5760405162461bcd60e51b815260206004820152600e60248201526d043616e6e6f74207374616b6520360941b60448201526064016105c9565b600d54611028908361141e565b600d55336000908152600e6020526040902054611045908361141e565b336000818152600e6020526040902091909155600554611072916001600160a01b0390911690308561151a565b33600090815260126020526040812054600f9060ff166003811061109857611098611882565b015460055460405163095ea7b360e01b81526001600160a01b039283166004820181905260248201879052935091169063095ea7b3906044016020604051808303816000875af11580156110f0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111149190611898565b61115a5760405162461bcd60e51b8152602060048201526017602482015276105c1c1c9bdd99481d1bc81d9bdd195c8819985a5b1959604a1b60448201526064016105c9565b6040516325286fa760e21b8152600481018490526001600160a01b038216906394a1be9c90602401600060405180830381600087803b15801561119c57600080fd5b505af11580156111b0573d6000803e3d6000fd5b50506040518581523392507f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d915060200161077a565b600f81600381106111f657600080fd5b01546001600160a01b0316905081565b61120e61142a565b60065442116112ab5760405162461bcd60e51b815260206004820152605860248201527f50726576696f7573207265776172647320706572696f64206d7573742062652060448201527f636f6d706c657465206265666f7265206368616e67696e67207468652064757260648201527f6174696f6e20666f7220746865206e657720706572696f640000000000000000608482015260a4016105c9565b60088190556040518181527ffb46ca5a5e06d4540d6387b930a7c978bce0db5f449ec6b3f5d07c6e1d44f2d390602001610524565b6000600d546000036112f35750600a5490565b6105a2611322600d546104c0670de0b6b3a764000061131c60075461131c60095461049b610e7a565b90611406565b600a549061141e565b6001600160a01b038116600090815260126020526040812054600f9060ff166003811061135a5761135a611882565b0160009054906101000a90046001600160a01b03166001600160a01b031663119f87476040518163ffffffff1660e01b8152600401602060405180830381865afa1580156113ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104cc91906118d3565b336000908152600e60205260409020546113e9906105a7565b6113f1610c90565b565b60006113ff8284611906565b9392505050565b60006113ff8284611919565b60006113ff8284611930565b60006113ff8284611952565b6000546001600160a01b031633146113f15760405162461bcd60e51b815260206004820152602f60248201527f4f6e6c792074686520636f6e7472616374206f776e6572206d6179207065726660448201526e37b936903a3434b99030b1ba34b7b760891b60648201526084016105c9565b6040516001600160a01b0383166024820152604481018290526114ff90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611558565b505050565b600081831061151357816113ff565b5090919050565b6040516001600160a01b03808516602483015283166044820152606481018290526115529085906323b872dd60e01b906084016114c8565b50505050565b60006115ad826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661162a9092919063ffffffff16565b8051909150156114ff57808060200190518101906115cb9190611898565b6114ff5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016105c9565b60606116398484600085611641565b949350505050565b6060824710156116a25760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016105c9565b843b6116f05760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016105c9565b600080866001600160a01b0316858760405161170c9190611989565b60006040518083038185875af1925050503d8060008114611749576040519150601f19603f3d011682016040523d82523d6000602084013e61174e565b606091505b509150915061175e828286611769565b979650505050505050565b606083156117785750816113ff565b8251156117885782518084602001fd5b8160405162461bcd60e51b81526004016105c991906119a5565b80356001600160a01b03811681146117b957600080fd5b919050565b6000602082840312156117d057600080fd5b6113ff826117a2565b6000602082840312156117eb57600080fd5b5035919050565b60ff8116811461180157600080fd5b50565b60006020828403121561181657600080fd5b81356113ff816117f2565b6000806040838503121561183457600080fd5b61183d836117a2565b946020939093013593505050565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b634e487b7160e01b600052603260045260246000fd5b6000602082840312156118aa57600080fd5b815180151581146113ff57600080fd5b6000602082840312156118cc57600080fd5b5051919050565b6000602082840312156118e557600080fd5b81516113ff816117f2565b634e487b7160e01b600052601160045260246000fd5b818103818111156104cc576104cc6118f0565b80820281158282048414176104cc576104cc6118f0565b60008261194d57634e487b7160e01b600052601260045260246000fd5b500490565b808201808211156104cc576104cc6118f0565b60005b83811015611980578181015183820152602001611968565b50506000910152565b6000825161199b818460208701611965565b9190910192915050565b60208152600082518060208401526119c4816040850160208701611965565b601f01601f1916919091016040019291505056fea264697066735822122003e02dfb5eec1988d26aa3124be5c8831f071f71cb248c8210fbc53e9827f51564736f6c63430008170033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 84,
        "contract": "contracts/votable-staking/VotableStakingRewards.sol:VotableStakingRewards",
        "label": "owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 86,
        "contract": "contracts/votable-staking/VotableStakingRewards.sol:VotableStakingRewards",
        "label": "nominatedOwner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 195,
        "contract": "contracts/votable-staking/VotableStakingRewards.sol:VotableStakingRewards",
        "label": "rewardsDistribution",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 1801,
        "contract": "contracts/votable-staking/VotableStakingRewards.sol:VotableStakingRewards",
        "label": "_status",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 266,
        "contract": "contracts/votable-staking/VotableStakingRewards.sol:VotableStakingRewards",
        "label": "rewardsToken",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IERC20)1216"
      },
      {
        "astId": 269,
        "contract": "contracts/votable-staking/VotableStakingRewards.sol:VotableStakingRewards",
        "label": "stakingToken",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(IERC20)1216"
      },
      {
        "astId": 272,
        "contract": "contracts/votable-staking/VotableStakingRewards.sol:VotableStakingRewards",
        "label": "periodFinish",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 275,
        "contract": "contracts/votable-staking/VotableStakingRewards.sol:VotableStakingRewards",
        "label": "rewardRate",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 278,
        "contract": "contracts/votable-staking/VotableStakingRewards.sol:VotableStakingRewards",
        "label": "rewardsDuration",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 280,
        "contract": "contracts/votable-staking/VotableStakingRewards.sol:VotableStakingRewards",
        "label": "lastUpdateTime",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 282,
        "contract": "contracts/votable-staking/VotableStakingRewards.sol:VotableStakingRewards",
        "label": "rewardPerTokenStored",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 286,
        "contract": "contracts/votable-staking/VotableStakingRewards.sol:VotableStakingRewards",
        "label": "userRewardPerTokenPaid",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 290,
        "contract": "contracts/votable-staking/VotableStakingRewards.sol:VotableStakingRewards",
        "label": "rewards",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 292,
        "contract": "contracts/votable-staking/VotableStakingRewards.sol:VotableStakingRewards",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 296,
        "contract": "contracts/votable-staking/VotableStakingRewards.sol:VotableStakingRewards",
        "label": "_balances",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 301,
        "contract": "contracts/votable-staking/VotableStakingRewards.sol:VotableStakingRewards",
        "label": "delegates",
        "offset": 0,
        "slot": "15",
        "type": "t_array(t_contract(Voter)1138)3_storage"
      },
      {
        "astId": 305,
        "contract": "contracts/votable-staking/VotableStakingRewards.sol:VotableStakingRewards",
        "label": "userDelegateIdx",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_address,t_uint8)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_contract(Voter)1138)3_storage": {
        "base": "t_contract(Voter)1138",
        "encoding": "inplace",
        "label": "contract Voter[3]",
        "numberOfBytes": "96"
      },
      "t_contract(IERC20)1216": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(Voter)1138": {
        "encoding": "inplace",
        "label": "contract Voter",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_address,t_uint8)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint8)",
        "numberOfBytes": "32",
        "value": "t_uint8"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}